<blog>
    <article>
        <dateAdded>2023-10-08</dateAdded>
        <html>
            <p>
                Getting a Minecraft server going might seem like a daunting process if you don't consider yourself
                savvy with computers, however I hope that this article will challenge that assumption. With just a
                little bit of head knowledge, you will be able to setup and maintain your very own server on the cheap.
            </p>
            <h2>Requirements</h2>
            <h4 style="float: left">1. A computer to host the server</h4>
            <br />
            <br />
            <p>
                How powerful it needs to be is largely dependent on how many players you
                expect to be on the server at any given time, although if you just plan to have a few of your friends on
                it at once, then any computer made within the last ten years should do the trick. I would also consider
                running the server on a dedicated computer, as you don't want to have to keep your main computer running
                and connected to the network at all times, although it is not strictly necessary.
            </p>
            <h4 style="float: left">2. A good internet connection</h4>
            <br />
            <br />
            <p>
                If you only plan to have the server accessible over your local network, then this requirement is kinda
                moot, however if you would like to let people to play from across the internet then you will need both
                a fast internet connection, and an IP address that is unlikely to change very often (possibly a static one)
                to ensure that players won't be constantly having to update their server settings.
            </p>
            <h4 style="float: left">3. Java Development Kit</h4>
            <br />
            <br />
            <p>
                Since this is a Java application we are running, Java will need to be installed. We won't just need the 
                Java runtime environment however, we are going to need the Java Development Kit which can be found
                <a href="https://www.oracle.com/java/technologies/downloads/" style="color: blue">here</a>.
                Take care to install the correct package for the platform you are running on however, as unlike most
                websites, it will not choose for you automatically. On Windows, this will likely be the x64 installer
                or the x64 MSI installer. On Mac, this will be the ARM64 DMG installer if you are on an Apple
                Silicon Mac, or the x64 DMG Installer if your Mac has an Intel Processor. If on Linux, you will most
                likely want the x64 Debian package, or the x64 RPM package depending on what distro you are running. Once
                the right package is downloaded, then just run it and follow the super easy instructions in the setup wizard.
                If you need more help, then I would recommend finding a guide online for installing the JDK that is tailored 
                to the specific computing platform that you plan to run the server on.
            </p>
            <img src="https://cdn.minepaper.net/blog/jdk_download_windows.png" class="col-md-3" style="width: 66%; object-fit: contain;" />
            <br />
            <br />
            <h4 style="float: left">4. Willingness to maintain the server</h4>
            <br />
            <br />
            <p>
                In my opinion, the biggest hurdle to running your own server is not technical know-how or what computer
                you can scrounge up, but your willingness to put the time and energy into maintaining the server down
                the road. If the server is set up properly and stable, then maintenance should be fairly minimal, but it
                will still require updates, backups, and fixes for when it does inevitably crash. Just keep it in mind when
                embarking on a project like this
            </p>
            <h2>Getting started</h2>
            <h4 style="float: left">1. Downloading the Software</h4>
            <br />
            <br />
            <p>
                Your first step is downloading the necessary files. Simply head to 
                <a href="https://www.minecraft.net/en-us/download/server" style="color: blue">this page</a>
                and download the .jar file. Since this is a Java application, the steps here on out should be the same
                whether you are on Windows, Mac, or Linux.
            </p>
            <img src="https://cdn.minepaper.net/blog/minecraft_server_download_page.png" class="col-md-3" style="width: 66%; object-fit: contain;" />
            <br />
            <br />
            <h4 style="float: left">2. Accepting the EULA</h4>
            <br />
            <br />
            <p>
                Next, copy the .jar file that you just downloaded into its own directory, and double click on it. If
                everything has gone correctly, then you should see that it has deposited some new files into the
                directory. One of these files should be called eula.txt, which you will want to open in a text editing
                program (I am using Notepad since I am doing this on Windows). Inside the doc, you should be able to see
                a line like this: "eula=false", which you want to change to "eula=true" and save the document. Keep in 
                mind that by doing this, you are accepting the agreement laid out on
                <a href="https://www.minecraft.net/en-us/eula" style="color: blue">this page</a>.
            </p>
            <h4 style="float: left">3. Running for the first time</h4>
            <br />
            <br />
            <p>
                Once you have accepted the EULA, then you should be ready to run the server! Simply double click the server.jar
                file once more, and you should see the server window pop up. Keep an eye on the console output that is now flowing
                across the screen, as you need it to know what the server is currently doing. You should see some text along the
                lines of "Preparing spawn area" with an increasing percentage value. Once it completes, then it should show a
                completion message meaning that you are ready to connect to the server.
            </p>
            <h4 style="float: left">3. Connecting to the server</h4>
            <br />
            <br />
            <p>
                Now, it's time to fire up Minecraft. Once the game is launched, click "Multiplayer" and then "Direct Connection".
                once there, you should see a field for an IP address. If you are running the game on the same computer as
                the server, then just type "localhost". If the game and server are running on different computers, then
                you will need to input the IP address of the machine running the server into the Direct Connection field
                in the game. Finding the IP address of the server is different depending on what operating system you are
                using, and it is easy to find how to do it online, so I am not going to go very much into detail here. That
                being said, if you dig around in the network settings long enough, then you will probably find it. Once that
                is completed, click "Join Server". If everything has gone correctly, then you should be playing on your server!
            </p>
            <h2>Optional Configuration</h2>
            <h4 style="float: left">1. The server.properties file</h4>
            <br />
            <br />
            <p>
                When it comes to tweaking the server parameters to your liking, the server.properties file is where you
                will find most of the settings for different aspects of the server. This includes the default game mode,
                whether you want cheats enabled, the default difficulty, and many other things. This file is automatically
                generated inside the same directory as the main server.jar file, and looking inside you can see that there
                is a list of different settings, one for each line. If you are a beginner, please make sure to only modify
                one value at a time, and only modify the values to the right of the = sign on each line.
            </p>
            <h4 style="float: left">2. The world folder</h4>
            <br />
            <br />
            <p>
                Inside the same directory as the server.jar file, you will find a folder called "world". This is the
                folder where the world data is stored. Looking inside, you will find that it is 100% the exact same as
                any other Minecraft Java Edition world. This means that you can copy it elsewhere to backup the world, replace
                it with one you downloaded from the internet, or transplant a world from singleplayer or another server.
            </p>
            <h4 style="float: left">3. Player management</h4>
            <br />
            <br />
            <p>
                Inside the main server directory, you will find the following .json files:
            </p>
            <ul style="width: 45%; margin: 0 auto; text-align: left">
                <li>banned-ips.json</li>
                <li>banned-players.json</li>
                <li>ops.json</li>
                <li>whitelist.json</li>
            </ul>
            <br />
            <p>
                These are the files that store data about which players have cheats enabled, which players are banned,
                and which players are whitelisted. You generally will not have to mess with these files since all
                of that stuff is manageable via console commands, however this is where that data is stored 
                (all in easy to read JSON format) for troubleshooting, or if you need to change something
                manually.
            </p>
            <h4 style="float: left">4. Port Forwarding</h4>
            <br />
            <br />
            <p>
                With the server set up using methods mentioned above, you might come to find that the server is only
                accessible to those on the same LAN network as you. You very well might want to host this server for your
                friends/family from their own houses, to which I would direct you to open up a port forwarding rule inside
                of your router. I'm going to prefice this by saying that doing this opens up a security risk, as it allows
                anybody to access the server so long as they know your public IP address. In addition, I can't really give you a
                step by step guide for it in this article since every router is going to have a different user interface. The
                underlying concept is exactly the same however, and you should create a rule that looks like the image below. 
                Just note however that the destination IP address field will be whatever the IP address of the computer 
                hosting the server is. 
            </p>
            <img src="https://cdn.minepaper.net/blog/port_forwarding_screenshot.png" class="col-md-3" style="width: 50%; object-fit: contain;" />
            <br />
            <br />
            <p>
                In a nutshell, what we have done here is given our router a specific instruction. We have told it that
                whenever it receives an inbound connection on port 25565, then to forward it to the destination IP address
                on the exact same port 25565. Just in case you are not aware, a port is used by server applications on your
                computer to listen for incoming traffic, similar to how IP addresses can locate things across a network. So
                by specifying the destination IP address and port 25565 (which just so happens to be what the Minecraft 
                server listens on by default), we can not only tell traffic to go to a specific device on the network,
                but also that the traffic needs to be handled via the Minecraft server running on it.
            </p>
        </html>
        <description>A step by step guide on everything you need to get your Minecraft server going</description>
        <category>General</category>
        <title>How to set up a Minecraft server (Java edition)</title>
        <author>Timothy Lickteig</author>
        <path>/blog/article/set-up-a-java-edition-server</path>
        <id>6</id>
        <thumbnailSrc>https://cdn.minepaper.net/blog/logo-1.png</thumbnailSrc>
    </article>
    <article>
        <dateAdded>2023-09-01</dateAdded>
        <html>
            <img src="https://cdn.minepaper.net/blog/wheat-seeds.webp" class="col-md-3" style="width: 25%; object-fit: contain;" />
            <br />
            <br />
            <p>
                No, not the kind of seeds you use to grow wheat. I'm talking about the kind that seem to magically
                determine how your world gets generated. It seems like witchcraft how a seemingly randomly generated
                world can be recreated with just a single number. As a software engineer however, it makes total
                sense to me, and with a little knowledge nugget you can understand also.
            </p>
            <img src="https://cdn.minepaper.net/blog/world-seed-in-chat.png" class="col-md-6" style="width: 75%; object-fit: contain;" />
            <br />
            <br />
            <p>
                To make a long rant short - it's because computers to not operate on a random basis. They just do
                math, which is never random. To get around this, a computer will get a number from somewhere. This
                number is usually derived from the current reading on the computer's clock, although it can be many
                different things. Crucially though, this number must be constantly changing. This number is the seed,
                which is then plugged into a bunch of highly complex mathematical equations. These equations are the
                algorithm, and out pops out our random number. These algorithms are such that you can get as many 
                random numbers as you want from a single seed. Here's where the magic happens though: if you plug
                the same seed twice into the same algorithm, then you will get the exact same set of random numbers.
                Knowing this, I think you can figure out where I'm going.
            </p>
            <figure>
                <img src="https://cdn.minepaper.net/blog/Linear_congruential_generator_visualisation.png" class="col-md-6" style="width: 75%; object-fit: contain;" />
                <figcaption>Source: 
                    <a style="color: blue" href="https://en.wikipedia.org/wiki/Linear_congruential_generator">Wikipedia</a>
                </figcaption>
            </figure>
            <br />
            <p>
                As you know, Minecraft worlds are randomly generated meaning that they rely on a random number algorithm,
                similar to the one discussed above. This means that giving Minecraft the seed of a world we had previously,
                we can replicate the same set of random numbers used to generate the world, and thus it will recreate the
                world itself. The only real caveat is that anything you build or mine is not random, and is not tied to the
                world seed, so make sure to back up your worlds folks. The same seed might also cause differences across
                multiple different versions of the game due to changes in the way the world is generated. Anyways, I hope
                this article helped give you some insight to how Minecraft works, and you can appreciate it the next time
                you use one to quickly find an abandoned mineshaft.
            </p>
        </html>
        <description>An insight to how the world seed can generate an entire world in Minecraft</description>
        <category>General</category>
        <title>How do seeds work in Minecraft?</title>
        <author>Timothy Lickteig</author>
        <path>/blog/article/how-do-seeds-work-in-minecraft</path>
        <id>5</id>
        <thumbnailSrc>https://cdn.minepaper.net/blog/wheat-seeds.webp</thumbnailSrc>
    </article>
    <article>
        <dateAdded>2023-08-17</dateAdded>
        <html>
            <p>
                The short answer is yes, and I've got a midrange laptop to prove it. The reason why however
                is a bit nuanced, and I'll be getting to it later on in this article.
            </p>
            <p>
                First, lets meet our test mule. This is a brand new HP Envy x360 that I bought a few weeks ago,
                and will do perfect for a test like this, since it's a computer that one might casually want to
                play a few games on, even if that is simply one of many roles that the laptop fulfills. Optimization
                is really important here, since these users will not be shelling out lots of money to upgrade their
                hardware, just to play a few games. Getting down to brass tax, this laptop is packing an AMD Ryzen
                5 7530U with Radeon Graphics, 8gb of RAM, and a 256gb SSD. The specs aren't too poultry, however it
                is by no means a gaming powerhouse either.
            </p>
            <img src="https://cdn.minepaper.net/blog/tims-hp-envy.jpg" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <br />
            <p>
                Next is the world that we will be using for this test. Ideally, the worlds would be exactly the same
                between the two editions, however I have noticed some differences that I just don't think we can
                avoid. Upon spawning into each world using the same exact seed, the biomes and overall landscape looked
                the same, but I very quickly noticed that generated structures were different. Villages and pillager outposts
                seemed to be generating independently of the world seed, and I imagine that the same holds true for the
                other generated structures in the world. There are probably other differences in the world generation
                magic that I am missing, and I don't think that we will be able to do anything about them. Nevertheless,
                I think it should have a negligible impact on performance.
            </p>
            <p>
                Now for the actual test case. This part can be done in many different ways, like blowing up lots of TNT or  
                building giant redstone contraptions. For me however, I think that the best way to do this is to just fly
                around a whole bunch. I say this because I think this will be a long sustained load that will put many
                components of the computer to the test like disk and memory, and I think that it will be a good simulation
                of long, drawn out play sessions where you have a big task you're trying to complete, and small but frequent
                stuttering will bug the crap out of you.
            </p>
            <p>
                So lets get started then. I'm going to start at spawn (-63, 69, 0), and fly north for a few minutes until I
                reach the coordinates of -6, 80, -2854. I will be watching the framerate, and also making a mental note of
                how much stuttering I encounter. Render distance will be set to 32 chunks and graphical settings will be
                cranked to the max.
            </p>
            <img src="https://cdn.minepaper.net/blog/spawn-point-java-performance-test.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <br />
            <p>
                Doing this in Java edition was pretty striking. Starting off the journey, we were pretty solidly averaging
                20 fps, but after a minute or two of flight we were down to ten. That's pretty unplayable, however I could get
                the fps up to 60 by tweaking just a few video settings, meaning that it was still easy to get an enjoyable
                experience.
            </p>
            <p>
                Moving on to Bedrock edition, things were much more cut and dry. With all settings cranked to the max, and with
                render distance at 32 chunks, I got a solid 30 fps while flying around with some stutters here and there. If you
                walked around instead, the framerate increased to 60! Additionally, turning the render distance down to 16 chunks
                eliminated the performance woes, and the game ran as smooth as silk.
            </p>
            <img src="https://cdn.minepaper.net/blog/java-edition-10-fps.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <br />
            <p>
                So in conclusion then, while Java edition is not horrible, you are definitely going to notice a squeeze on lower
                end hardware. It's for that reason I would recommend that most users should generally gravitate towards Bedrock,
                unless you have a specific reason not to, such as if you are gaming on a Mac, or if you intend to mod the game.
            </p>
            <p>
                Lastly, I want to go over exactly why Java edition runs that much worse. Admittedly, what I am going to mention here
                is kinda conjecture, as I can't make too many concrete claims without knowing all the ins and outs of how Minecraft
                is written. That being said, lets go over what I think is causing Java edition to run slower.
            </p>
            <p>
                In my opinion, the biggest reason why is that Java edition uses OpenGL, and the Bedrock edition for Windows uses DirectX.
                These are both Graphics APIs, which is the set of commands that the game can use to talk to the computers graphics processor,
                and thus render the game on your monitor. OpenGL has the major advantage of being cross platform but is also nowhere near as
                performant. DirectX only runs on Windows and the Xbox, but is widely regarded as the best. This kind of stuff might not be
                obvious at first, but can have a huge impact on the game you play, and can even make or break the experience in some cases.
            </p>
            <img src="https://cdn.minepaper.net/blog/java-logo.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <br />
            <p>
                The second reason that I think the game runs slower on Java edition is because of what the game is written in; Java. To go more
                in detail about this we need to learn a bit about how programming languages work. In short, to get our code to run we need to
                compile it; that is, translate the code into instructions that our processor can read. Bedrock edition is written in C++, which
                compiles directly into raw machine code that the processor reads directly. The downside is that this is not cross platform,
                since machine code only works on one type of processor, but it's about as fast as you can possibly get it. Java on the other
                hand compiles into bytecode, which has to be translated on the fly by the Java runtime environment on your computer. This middle
                man enables the code to be cross platform, but you will take a performance hit in the process.
            </p>
            <p>
                Lastly, and likely least admittedly, is its age. I'll remind you that this is conjecture, but Java edition is pretty old. The
                oldest edition period. It is almost a decade older than Bedrock edition, and is still being updated to this day. I can't say
                for sure, but my guess is that there is at least some inefficient code weighing Java edition down, as that just happens with
                software sometimes. It just builds up as the software ages and new features get piled on, and suddenly the developers have a
                huge mess to clean up. Just take a gander at the Adobe suite.
            </p>
            <p>
                In conclusion then, I hope you learned a thing or two about how Minecraft works under the hood, and why the performance of the
                game might just not be quite good enough on that gaming PC that is starting to age. Anyways, my hands are cramping and it's
                getting late, so peace out!
            </p>
        </html>
        <description>Learn about the performance issues that have been silently plaging Java edition for multiple years now</description>
        <category>General</category>
        <title>Is Minecraft Java edition less optimized than Bedrock edition?</title>
        <author>Timothy Lickteig</author>
        <path>/blog/article/is-minecraft-java-edition-less-optimized-than-bedrock-edition</path>
        <id>4</id>
        <thumbnailSrc>https://cdn.minepaper.net/blog/java-edition-title.png</thumbnailSrc>
    </article>
    <article>
        <dateAdded>2023-08-11</dateAdded>
        <html>
            <p>
                Back in the day, there was just Java edition. Now, there are so many that even I
                can barely keep track of them. Luckily I have this helpful little guide written to help
                you. First things first, I will only be listing the main game, and not any of the spin-offs
                like legends or dungeons because neither of them are the typical sandbox game that
                you might expect, and they frankly deserve their own articles.
            </p>
            <h3>Legacy console editions</h3>
            <iframe style="width: 75%" width="560" height="315" src="https://www.youtube.com/embed/rvlwWiskcLk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share">#</iframe>
            <br />
            <br />
            <p>
                The first set of versions that I'm going to mention are the legacy console editions. This
                harkens back to the early days of Minecraft, back in the early 2010's. This predominantly 
                includes both the Xbox 360 and PS3 versions of the game, although there were also PS Vita 
                and Wii U versions. They are unfortunately abandoned now, but are probably 
                still good for a bit of fun if you happen to dust off your old Xbox.
                Either way though, most people will not be playing on this version, so lets move on.
            </p>
            <h3>Java edition</h3>
            <p>
                Next version is Java edition. This version in my opinion is for two different groups of
                people: Mac users and modders. Unfortunately, Java edition is the only option for Mac users,
                due to Java itself being cross-platform by design. Luckily the percentage of Minecraft players
                on Mac is pretty small, and they seem to be doing just fine.
            </p>
            <img src="https://cdn.minepaper.net/blog/java-launcher.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <br />
            <p>
                Java edition is also your only real option if you plan to mod the game. Other editions benefit
                from texture packs and behavior packs, but good luck if you want to 
                <a href="https://micdoodle8.com/mods/galacticraft/" style="color: blue">
                    go to the freaking moon!
                </a>
                That being said, I am not sure I can recommend it for all PC users (especially low end hardware)
                due to the severe optimization issues that it has accumulated over the years.
            </p>
            <h3>Bedrock Edition</h3>
            <p>
                The next one is what I would recommend that most people play on, which is Bedrock edition. This
                edition is what is available for all major mobile platforms, Windows, Xbox one/series consoles, 
                PS4/PS5 and the Nintendo Switch. Written in C++ rather than Java, Bedrock editions of Minecraft 
                are much more optimized for the devices that they run on. The downside is that the game is much 
                less customizable than Java edition, and console users are required to pay for premium online 
                services, but it's not like they have a choice anyways. Nevertheless, it's the version that runs 
                on the most platforms, simple to play, and is perfectly optimized. For that reason, I recommend 
                it for the most people.
            </p>
            <img src="https://cdn.minepaper.net/blog/windows-edition-homepage.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <br />
            <h3>Other weird versions</h3>
            <ul style="width: 45%; margin: 0 auto; text-align: left">
                <li>Education edition</li>
                <li>Minecraft Earth</li>
                <li>Pi Edition</li>
                <li>China Edition</li>
                <li>Minecraft Classic</li>
                <li>New Nintendo 3DS version</li>
                <li>Gear VR edition</li>
                <li>Fire TV Edition</li>
                <li>Apple TV edition</li>
                <li>Minecraft 4k</li>
            </ul>
        </html>
        <description>Navigate the sea of different Minecraft version using this guide</description>
        <category>General</category>
        <title>Which edition of Minecraft is right for you?</title>
        <author>Timothy Lickteig</author>
        <path>/blog/article/which-edition-of-minecraft-is-right-for-you</path>
        <id>3</id>
        <thumbnailSrc>https://cdn.minepaper.net/blog/minecraft-pi-edition.webp</thumbnailSrc>
    </article>
    <article>
        <dateAdded>2023-08-05</dateAdded>
        <html>
            <p>
                Resource packs have been a staple of Minecraft for many years. One slightly less known method of changing Minecraft's look is using shader packs. 
                These shader packs require you to mod your installation, but in return you can alter the visual appearance much more. Instead of changing block
                texture, shader packs generally alter lighting, shadows, clouds, and water effects. So without further ado then, lets go over what shaders and
                resource packs that we use here at Minepaper.
            </p>
            <br />
            <h3>1. Bliss</h3>
            <p>
                The Bliss shader pack is one that gives Minecraft a very pastel appearance. Colors are bright and vibrant, but my favorite part are the
                hyperrealistic clouds.
            </p>
            <img src="https://cdn.minepaper.net/2023-08-05_13.20.30.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <a href="https://minecraftshader.com/bliss-shaders/" style="color: blue">Download Bliss</a>
            <br />
            <br />
            <h3>2. BSL</h3>
            <p>
                BSL shaders take on a very similar appearance to Bliss in my opinion. The biggest difference to me is the slight aura that appears around blocks
                when the light level is high. Clouds also look much softer than in Bliss, and there is a diamond shaped sun and moon. Shadows and water effects 
                look pretty much the same though.
            </p>
            <img src="https://cdn.minepaper.net/2023-08-05_13.22.48.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <a href="https://www.bslshaders.com/download/" style="color: blue">Download BSL</a>
            <br />
            <br />
            <h3>3. ComplementaryReimagined</h3>
            <p>
                This is another shader pack that gives Minecraft a distinct pastel appearance. Unlike in Bliss or BSL however, colors are a tad bit darker. In
                addition, clouds have a funky rounded appearance that makes this pack unique. Lastly, the pastel appearance also appplies to bodies of water
                in this one.
            </p>
            <img src="https://cdn.minepaper.net/2023-08-05_13.25.52.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <a href="https://www.complementary.dev/reimagined/" style="color: blue">Download ComplementaryReimagined</a>
            <br />
            <br />
            <h3>4. ProjectLUMA</h3>
            <p>
                ProjectLUMA breaks the pastel trend of the previous items in the list and aims for raw visual fidelity. The colors are highly saturated, 
                shadows are sharp, water looks like it came from a clear mountain stream, and the clouds are ultra realistic. Highly recommended.
            </p>
            <img src="https://cdn.minepaper.net/2023-08-05_13.28.19.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <a href="https://minecraftshader.com/projectluma-shaders/" style="color: blue">Download ProjectLUMA</a>
            <br />
            <br />
            <h3>5. Solas Shaders</h3>
            <p>
                This shader pack is the one that I personally find to be the most beautiful. This is mostly owing to the amazing display of stars you will
                see above the clouds even in the daytime. In addition, there is a breathtaking view of the aurora borealis at night that will leave your
                jaws wide open like a barn door. These two factors alone are enough to trick you into thinking you're in a fantasy land, but it doesn't
                end there. The shadows and water effects are perfectly akin to real life, and there is a circular sun and moon to boot. Overall, this is a
                shader pack that is just waiting to wow you, and you should give it a shot if you are looking to spruce up your experience.
            </p>
            <img src="https://cdn.minepaper.net/2023-08-05_13.33.11.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <p>&#xA;</p>
            <img src="https://cdn.minepaper.net/2023-08-05_13.35.48.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <a href="https://minecraftshader.com/solas-shaders/" style="color: blue">Download Solas</a>
            <br />
            <br />
            <h3>6. Patrix</h3>
            <p>
                Moving on to resource packs now, we have Patrix. I personally adore Patrix due to the rustic look that it brings to Minecraft. Cobblestone,
                Wood, and Dirt make npc villages look like they come from 16th century Europe. I also enjoy the look of ice blocks in particular, with their
                webbed appearance that makes it look there are air bubbles trapped amongst the frozen blocks.
            </p>
            <img src="https://cdn.minepaper.net/2023-08-05_13.53.08.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <a href="https://www.curseforge.com/minecraft/texture-packs/patrix-32x" style="color: blue">Download Patrix</a>
            <br />
            <br />
            <h3>7. ModernArch</h3>
            <p>
                Last but certainly not least, we have ModernArch. This is a resource pack that I find make the look of NPC villages very pleasing in
                particular. Wooden doors have a sleek and modern appearance. Wood and Cobblestone blocks also look very clean, and torches look like old
                school gas lanterns. Overall, I highly recommend this pack if your goal is to spruce up the look of artificial structures in game.
            </p>
            <img src="https://cdn.minepaper.net/2023-08-05_13.54.25.png" class="col-md-6" style="width: 50%; object-fit: contain;"/>
            <br />
            <a href="https://www.designio.graphics/community/downloads/modernarch-1-20-1-19-128x-download" style="color: blue">Download ModernArch</a>
            <br />
            <br />
        </html>
        <description>These are the Shaders and Resource packs that we use when taking screenshots to use as wallpapers</description>
        <category>General</category>
        <title>What Shaders and Resource packs does Minepaper use?</title>
        <author>Timothy Lickteig</author>
        <path>/blog/article/what-shaders-and-resource-packs-does-minepaper-use</path>
        <id>2</id>
        <thumbnailSrc>https://cdn.minepaper.net/2023-08-05_13.35.48.png</thumbnailSrc>
    </article>
    <article>
        <dateAdded>2023-08-05</dateAdded>
        <html>
            <p>
                Minepaper is a desktop application that will run in the background on your computer. All of the wallpapers are stored in the cloud,
                and will get downloaded onto your computer automatically. Then, you simply just flip the switch, and set the interval that you want the
                wallpaper to change at. After that, you can simply forget about it! Minepaper will run silently in the background, and your wallpaper
                will be consistently refreshed with no action from you necessary. This app is completely free and open source, and is available for
                both Windows and MacOS. Enjoy!
            </p>
            <img class="col-md-6" style="width: 50%; object-fit: contain;" src="https://cdn.minepaper.net/blog/logo-1.png" />
            <br />
        </html>
        <description>Learn in depth about what Minepaper is all about.</description>
        <category>General</category>
        <title>What is Minepaper?</title>
        <author>Timothy Lickteig</author>
        <path>/blog/article/what-is-minepaper</path>
        <id>1</id>
        <thumbnailSrc>https://cdn.minepaper.net/blog/logo-1.png</thumbnailSrc>
    </article>
</blog>